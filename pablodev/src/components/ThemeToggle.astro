---
// Importar los íconos y definir los temas disponibles
import SunIcon from "../icons/Sun.astro";
import MoonIcon from "../icons/Moon.astro";
import SystemIcon from "../icons/System.astro";

const THEMES = ["Light", "Dark", "System"];
---

<div class="relative ml-1 mr-1">
  <label class="switch">
    <input type="checkbox" class="input" id="theme-toggle" />
    <span class="slider"></span>
    <span class="sun">
      <SunIcon />
    </span>
    <span class="moon">
      <MoonIcon />
    </span>
  </label>
</div>

<style>
  .switch {
    font-size: 17px;
    position: relative;
    display: inline-block;
    width: 64px;
    height: 34px;
  }

  .switch input {
    opacity: 0;
    width: 0;
    height: 0;
  }

  .slider {
    position: absolute;
    cursor: pointer;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: #73c0fc;
    transition: 0.4s;
    border-radius: 30px;
  }

  .slider:before {
    position: absolute;
    content: "";
    height: 30px;
    width: 30px;
    border-radius: 20px;
    left: 2px;
    bottom: 2px;
    z-index: 2;
    background-color: #e8e8e8;
    transition: 0.4s;
  }

  .input:checked + .slider {
    background-color: #183153;
  }

  .input:checked + .slider:before {
    transform: translateX(30px);
  }

  .sun svg {
    position: absolute;
    top: 6px;
    left: 36px;
    z-index: 1;
    width: 24px;
    height: 24px;
    transition: opacity 0.4s;
  }

  .moon svg {
    fill: #73c0fc;
    position: absolute;
    top: 5px;
    left: 5px;
    z-index: 1;
    width: 24px;
    height: 24px;
    transition: opacity 0.4s;
  }

  .input:checked ~ .sun svg {
    opacity: 0;
  }

  .input:checked ~ .moon svg {
    opacity: 1;
  }
</style>

<script is:inline>
  // Obtener el tema preferido del localStorage o del sistema
  const getThemePreference = () => {
    if (typeof localStorage !== "undefined") {
      return localStorage.getItem("theme") ?? "system";
    }
    return window.matchMedia("(prefers-color-scheme: dark)").matches
      ? "dark"
      : "light";
  };

  // Actualizar el tema según la preferencia
  const updateTheme = () => {
    const themePreference = getThemePreference();
    const isDark =
      themePreference === "dark" ||
      (themePreference === "system" &&
        window.matchMedia("(prefers-color-scheme: dark)").matches);

    document.documentElement.classList[isDark ? "add" : "remove"]("dark");

    // Actualizar el estado del checkbox
    document.getElementById("theme-toggle").checked = isDark;
  };

  // Función para manejar el cambio de tema
  const handleThemeChange = (e) => {
    const isChecked = e.target.checked;
    const theme = isChecked ? "dark" : "light";
    localStorage.setItem("theme", theme);
    updateTheme();
  };

  // Inicializar el tema y agregar el listener al checkbox
  document.addEventListener("DOMContentLoaded", () => {
    updateTheme();
    document
      .getElementById("theme-toggle")
      .addEventListener("change", handleThemeChange);
  });
</script>
